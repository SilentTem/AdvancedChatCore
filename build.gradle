plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
	id 'io.freefair.lombok' version '8.10'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

apply from: 'https://gist.githubusercontent.com/EnricoMessall/fb5de26a0ac26840060fd1ef45c32a5f/raw/cba2886a0fc2c95b24fc093684b4e6bfeafbd5ba/publish.gradle'

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = "${project.minecraft_version}-${project.mod_version}"
group = project.maven_group

Properties additionalProperties = new Properties()
if (file("extra.properties").exists()) {
	additionalProperties.load(file("extra.properties").newReader())
}

repositories {
	mavenCentral()
	maven { url 'https://masa.dy.fi/maven' }
	maven { url 'https://maven.terraformersmc.com/releases/' }
	maven { url 'https://jitpack.io' }
	maven { url 'https://maven.wispforest.io' }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
	modImplementation "com.github.sakura-ryoko:malilib:${project.malilib_version}"
	modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version}"

	implementation "com.github.DarkKronicle.Konstruct:addons:${project.konstruct_version}"
	implementation "com.github.DarkKronicle.Konstruct:core:${project.konstruct_version}"

	implementation 'com.electronwill.night-config:toml:3.6.5'
	// Transitive
	include 'com.electronwill.night-config:toml:3.6.5'
	include 'com.electronwill.night-config:core:3.6.5'


	include "com.github.DarkKronicle.Konstruct:addons:${project.konstruct_version}"
	include "com.github.DarkKronicle.Konstruct:core:${project.konstruct_version}"

	implementation "org.mariuszgromada.math:MathParser.org-mXparser:${project.mxparser_version}"
	include "org.mariuszgromada.math:MathParser.org-mXparser:${project.mxparser_version}"

	implementation "io.github.maowimpl:owo:${project.owo_version}"
	include "io.github.maowimpl:owo:${project.owo_version}"

	implementation 'org.apache.commons:commons-csv:1.8'
	include 'org.apache.commons:commons-csv:1.8'

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 21
}

//task sourcesJar(type: Jar, dependsOn: classes) {
//	classifier = "sources"
//	from sourceSets.main.allSource
//}

tasks.register('sourcesJar', Jar) {
	dependsOn classes
	archiveClassifier.set('sources')
	from sourceSets.main.allSource
}


jar {
	from "LICENSE.txt"
}

tasks.register('downloadExtra') {
	def f = new File('./src/main/resources/swear_words.csv')
	if (!f.exists()) {
		new URL('https://raw.githubusercontent.com/surge-ai/profanity/main/profanity_en.csv').withInputStream{ i -> f.withOutputStream{ it << i }}
	}
}

assemble {
	dependsOn 'downloadExtra'
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = 'advancedchatcore'  // Set artifact ID in lowercase
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/Arematics/AdvancedChatCore")
			credentials {
				username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
				password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
			}
		}
	}
}
